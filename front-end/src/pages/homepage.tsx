import React, { useState } from 'react';
import {
    BarChart,
    Bar,
    XAxis,
    YAxis,
    CartesianGrid,
    Tooltip,
    Legend,
    Cell
} from 'recharts';
import './homepage.css';

// D·ªØ li·ªáu m·∫´u cho bi·ªÉu ƒë·ªì
const data = [
    { date: '3/1', quality: 40 },
    { date: '3/2', quality: 60 },
    { date: '3/3', quality: 50 },
    { date: '3/4', quality: 100 },
    { date: '3/5', quality: 30 },
    { date: '3/1', quality: 40 },
    { date: '3/2', quality: 60 },
    { date: '3/3', quality: 50 },
    { date: '3/4', quality: 80 },
    { date: '3/5', quality: 30 },
    { date: '3/1', quality: 40 },
    { date: '3/2', quality: 60 },
    { date: '3/3', quality: 50 },
    { date: '3/4', quality: 80 },
    { date: '3/5', quality: 30 },
];

// H√†m tr·∫£ v·ªÅ m√†u d·ª±a tr√™n gi√° tr·ªã quality
const getColorByValue = (value: number) => {
    if (value < 40) {
        return '#63B15E'; // xanh l√° (T·ªët)
    } else if (value < 70) {
        return '#FBA669'; // cam (Trung b√¨nh)
    } else {
        return '#F57F7F'; // ƒë·ªè (K√©m)
    }
};

// Component legend t√πy ch·ªânh g·ªìm c√°c √¥ m√†u v√† ch√∫ th√≠ch
const CustomizedLegend: React.FC = () => {
    return (
        <div className="custom-legend-container">
            <div className="custom-legend">
                <span>
                    <span className="legend-color-box" style={{ backgroundColor: '#63B15E' }}></span>
                    T·ªêT
                </span>
                <span>
                    <span className="legend-color-box" style={{ backgroundColor: '#FBA669' }}></span>
                    TRUNG B√åNH
                </span>
                <span>
                    <span className="legend-color-box" style={{ backgroundColor: '#F57F7F' }}></span>
                    K√âM
                </span>
            </div>
        </div>
    );
};

const Homepage: React.FC = () => {
    const [activeIndex, setActiveIndex] = useState<number | null>(null);

    return (
        <div className="main-content">
            {/* C√°c ch·ªâ s·ªë (metrics) */}
            <div className="metrics-container">
                <div className="metric-card">
                    <div className="metric-icon">üå°</div>
                    <div className="metric-info">
                        <p>NHI·ªÜT ƒê·ªò</p>
                        <h2>37¬∞C</h2>
                    </div>
                </div>
                <div className="metric-card">
                    <div className="metric-icon">üíß</div>
                    <div className="metric-info">
                        <p>ƒê·ªò ·∫®M</p>
                        <h2>37%</h2>
                    </div>
                </div>
                <div className="metric-card">
                    <div className="metric-icon">‚òÄÔ∏è</div>
                    <div className="metric-info">
                        <p>C∆Ø·ªúNG ƒê·ªò </p>
                        <p>√ÅNH S√ÅNG</p>
                        <h2>37cd</h2>
                    </div>
                </div>
                <div className="metric-card">
                    <div className="metric-icon">üå±</div>
                    <div className="metric-info">
                        <p>CO2</p>
                        <h2>37%</h2>
                    </div>
                </div>
            </div>

            {/* Bi·ªÉu ƒë·ªì */}
            <div className="chart-container">
                <h3>TH·ªêNG K√ä CH·∫§T L∆Ø·ª¢NG KH√îNG KH√ç G·∫¶N ƒê√ÇY</h3>
                {/* B·ªçc BarChart trong container c√≥ n·ªÅn m√†u */}
                <div className="chart-wrapper">
                    <BarChart
                        width={940}
                        height={400}
                        data={data}
                        margin={{ top: 20, right: 30, left: 20, bottom: 5 }}
                    >
                        <CartesianGrid strokeDasharray="3 3" />
                        <XAxis dataKey="date" />
                        <YAxis />
                        <Tooltip />
                        <Legend content={<CustomizedLegend />} />
                        <Bar dataKey="quality" name="Ch·∫•t l∆∞·ª£ng" radius={[10, 10, 10, 10]} barSize={20}>
                            {data.map((entry, index) => (
                                <Cell key={`cell-${index}`} fill={getColorByValue(entry.quality)} />
                            ))}
                            {data.map((entry, index) => {
                                const baseColor = getColorByValue(entry.quality);
                                // V√≠ d·ª•: khi hover, ta thay ƒë·ªïi m√†u th√†nh phi√™n b·∫£n ƒë·∫≠m h∆°n (·ªü ƒë√¢y d√πng v√≠ d·ª• m√†u ƒëen, b·∫°n c√≥ th·ªÉ thay ƒë·ªïi theo √Ω)
                                const fillColor = activeIndex === index ? "#000" : baseColor;
                                return (
                                    <Cell
                                        key={`cell-${index}`}
                                        fill={fillColor}
                                        onMouseEnter={() => setActiveIndex(index)}
                                        onMouseLeave={() => setActiveIndex(null)}
                                    />
                                );
                            })}
                        </Bar>
                    </BarChart>
                </div>
                <div className="button-container">
                    <button className="detail-button">Xem chi ti·∫øt</button>
                </div>
            </div>
        </div>
    );
};

export default Homepage;
